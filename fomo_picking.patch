--- a/fomo.py
+++ b/fomo.py
@@ class TomoViewer(QtWidgets.QWidget):
     def __init__(self, path, verbose=False,
                  scroll_base=4, scroll_threshold=2.0,
                  scroll_mult=0.01, scroll_max_streak=4):
         super().__init__()
         self._verbose = verbose
         self._sv_params = dict(scroll_base=scroll_base,
                                scroll_threshold=scroll_threshold,
                                scroll_mult=scroll_mult,
                                scroll_max_streak=scroll_max_streak)
+
+        # Picking mode state
+        self.picking_mode = False
+        self.pick_points = []
+        self.custom_plane_active = False
+        self.custom_plane_data = None
+        self.custom_plane_qimg = None

         self.files = list_mrcs(path)
         if not self.files:
@@
         QtWidgets.QShortcut(QtGui.QKeySequence("H"), self, self._toggle_hist)
         QtWidgets.QShortcut(QtGui.QKeySequence("Z"), self, self._toggle_xz)
         QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Up), self, lambda: self._step_z(4))
         QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.Key_Down), self, lambda: self._step_z(-4))
+
+        # Picking mode shortcuts
+        QtWidgets.QShortcut(QtGui.QKeySequence("P"), self, self._toggle_picking)
+        QtWidgets.QShortcut(QtGui.QKeySequence("X"), self, self._handle_pick_x)
@@
     def _clicked_xy(self, x, y):
-        self.x, self.y = x, y
-        self._refresh_views(delayed_xz=self.xz_visible)
+        if self.picking_mode:
+            self._picking_click(x, y)
+        else:
+            self.x, self.y = x, y
+            self._refresh_views(delayed_xz=self.xz_visible)
@@
     def _step_z(self, step):
+        if self.picking_mode:
+            # Ignore scroll in picking mode to keep performance high
+            return
         self.z = int(np.clip(self.z + step, 0, self.Z - 1))
         self.scroll_z.blockSignals(True)
         self.scroll_z.setValue(self.z)
@@
     def _toggle_xz(self):
         self.xz_visible = not self.xz_visible
         self._cancel_xz_timer()
         self.top_split.setVisible(self.xz_visible)
@@
     def _next_file(self):
         if self.idx < len(self.files) - 1:
             self.idx += 1
             self.load_file(self.idx)
+
+    # ---------- Picking mode ----------
+    def _toggle_picking(self):
+        self.picking_mode = not self.picking_mode
+        self.pick_points.clear()
+        self.custom_plane_active = False
+        self.custom_plane_data = None
+        self.custom_plane_qimg = None
+        if self.picking_mode:
+            self.top_split.setVisible(False)  # hide XZ + histogram
+            self.lbl.setText(self.lbl.text() + "   [PICKING MODE ACTIVATED]")
+        else:
+            self.top_split.setVisible(True)
+            self._refresh_views(delayed_xz=self.xz_visible)
+
+    def _picking_click(self, x, y):
+        if len(self.pick_points) < 2:
+            self.pick_points.append((x, self.z, y))  # store voxel coords (x,z,y)
+            if len(self.pick_points) == 1:
+                self._draw_pick_marker(x, y)
+            elif len(self.pick_points) == 2:
+                self._build_custom_plane()
+        else:
+            self.pick_points.clear()
+            self.custom_plane_active = False
+            self._refresh_views(delayed_xz=False)
+
+    def _draw_pick_marker(self, x, y):
+        scene = self.view_xy.scene()
+        pen = QtGui.QPen(QtGui.QColor(255, 0, 0))
+        pen.setWidth(2)
+        brush = QtGui.QBrush(QtGui.QColor(255, 0, 0))
+        r = 4
+        scene.addEllipse(x - r, y - r, 2 * r, 2 * r, pen, brush)
+
+    def _build_custom_plane(self):
+        (x1, z1, y1), (x2, z2, y2) = self.pick_points
+        dx, dy, dz = x2 - x1, y2 - y1, z2 - z1
+        length = math.sqrt(dx*dx + dy*dy + dz*dz)
+        if length == 0:
+            return
+        nx, ny, nz = dx / length, dy / length, dz / length
+        width = 40
+        height = int(round(length))
+        plane = np.zeros((height, width), dtype=np.float32)
+        cx, cy, cz = x1, y1, z1
+        wx = np.array([-ny, nx, 0])
+        wx /= np.linalg.norm(wx)
+        for j in range(width):
+            for i in range(height):
+                px = cx + nx * i + wx[0] * (j - width/2)
+                py = cy + ny * i + wx[1] * (j - width/2)
+                pz = cz + nz * i
+                xi, yi, zi = int(round(px)), int(round(py)), int(round(pz))
+                if 0 <= zi < self.Z and 0 <= yi < self.Y and 0 <= xi < self.X:
+                    plane[i, j] = self.data[zi, yi, xi]
+        self.custom_plane_data = plane
+        self.custom_plane_qimg, _ = self._qimg_from_slice(plane)
+        self.custom_plane_active = True
+        self.view_xy.set_image(self.custom_plane_qimg)
+        self.view_xy.fit_height()
+
+    def _handle_pick_x(self):
+        if not self.picking_mode:
+            return
+        # Simulate click at current center
+        self._picking_click(self.x, self.y)

